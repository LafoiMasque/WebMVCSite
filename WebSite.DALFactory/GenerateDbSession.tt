<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="EntityFramework" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Reflection" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#
    bool isRun = false;
    isRun = true;
    if(isRun)
    {
        //D:\CodeTemp\VS2017\WebMVCSite\WebSite.Model\bin\Debug\WebSite.Model.dll
        string modelFile = @"D:\CodeTemp\VS2017\WebMVCSite\WebSite.Model\bin\Debug\WebSite.Model.dll";
        if(File.Exists(modelFile))
        {
            byte[] fileData = File.ReadAllBytes(modelFile);
            Assembly assembly = Assembly.Load(fileData);
            Type type = assembly.GetTypes().FirstOrDefault(m => m.BaseType.Name.Equals("DbContext"));
            if (type != null)
            {
                                    #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现方法。
// </auto-generated>
//
// <copyright file="<#= type.Name #>">
//		Copyright(c)2018 rights reserved.
//		开 发 者：黄翔宇@中国
//		生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------
using System.Data.Entity;
using WebSite.DAL;
using WebSite.IDAL;

namespace WebSite.DALFactory
{
	/// <summary>
	/// 数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例。所以数据会话层将业务层与数据层解耦。
	/// 在数据会话层中提供一个方法：完成所有数据的保存。
	/// </summary>
	public partial class DbSession : IDbSession
	{
<#
                PropertyInfo[] types = type.GetProperties();
                foreach (PropertyInfo item in types)
                {
                    if (item.PropertyType.IsGenericType)
                    {
                        string entityName = item.PropertyType.GenericTypeArguments[0].Name;
                        string InstanceName = string.Format("{0}Dal", entityName);
                        string interfaceName = string.Format("I{0}", InstanceName);
                        string fieldName = string.Format("_{0}{1}", InstanceName.Substring(0,1).ToLower(), InstanceName.Substring(1));
                    #>
        private <#= interfaceName #> <#= fieldName #> = null;
        /// <summary>
		/// 获取<#= interfaceName #>接口的实例
		/// </summary>
		public <#= interfaceName #> <#= InstanceName #>
		{
			get
			{
				if (<#= fieldName #> == null)
				{
					//通过抽象工厂封装了类的实例的创建
					<#= fieldName #> = AbstractFactory.CreateInstanceDal<<#= interfaceName #>>();
				}
				return <#= fieldName #>;
			}
		}

<#
                    }
                }
#>    }
}<#
            }
        }
    }
#>